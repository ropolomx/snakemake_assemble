rule bin_make_cov_files:
    input:
        crams = lambda wildcards: expand(map_dir + "{sample}/mapping/{sample}_{bin_sample}.cram",
               sample=wildcards.sample, bin_sample=config['binning_samples']),
        ref = assemble_dir + "{sample}/%s/{sample}.contigs.simple.fa" % config['mapping_assembler']
    output:
        bin_dir + "{sample}/abundance_files/{sample}_abund_list.txt"
    log:
        bin_dir + "logs/bin_make_cov_files_{sample}.log"
    benchmark:
        "benchmarks/bin/bin_make_cov_files_{sample}.json"
    threads:
        8
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            out_dir = os.path.dirname(output[0])
            abund_list = ''
            for cram in input.crams:
                fn = os.path.basename(cram).split('.')[0]
                shell("""
                        samtools view -O SAM -T {input.ref} {cram} --threads {threads} -h | \
                        pileup.sh out={temp_dir}/{fn}_pileup.txt 2> {log} 1>&2

                        awk '{{print $1"\t"$2}}' {temp_dir}/{fn}_pileup.txt | \
                        grep -v '^#' > {temp_dir}/{fn}_abund.txt
                      """)
                abund_list += os.path.join(out_dir, fn + '_abund.txt\n')

            shell("""
                    scp {temp_dir}/*.txt {out_dir}/.
                  """)
            with open(output[0],'w') as f:
                f.write(abund_list)


rule bin_run_maxbin:
    input:
        abund = bin_dir + "{sample}/abundance_files/{sample}_abund_list.txt",
        ref = assemble_dir + "{sample}/%s/{sample}.contigs.simple.fa" % config['mapping_assembler']
    output: 
        bin_dir + "{sample}/maxbin/{sample}.summary"
    log:
        bin_dir + "logs/bin_maxbin_{sample}.log"
    benchmark:
        "benchmarks/bin/bin_maxbin_{sample}.json"
    params:
        maxbin = config['params']['maxbin']
    threads:
        8
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            out_base = os.path.dirname(output[0])
            if params.maxbin is None:
                params.maxbin = ''
            shell("""
                    run_MaxBin.pl -contig {input.ref} -out {out_base}/{wildcards.sample} \
                    -abund_list {input.abund} {params.maxbin} -thread {threads} 2> {log} 1>&2
                  """)

rule bin_maxbin:
    input:
        expand(bin_dir + "{sample}/maxbin/{sample}.summary",
               sample = samples)

rule bin:
    input:
        expand(bin_dir + "{sample}/abundance_files/{sample}_abund_list.txt",
               sample = samples),
        expand(bin_dir + "{sample}/maxbin/{sample}.summary",
               sample = samples)