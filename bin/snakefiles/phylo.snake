import glob

PHYLOPHLAN_DIR=config["software"]["phylophlan_folder"]
#IN_DIR="/Sid/snurk/tax_test"
binner="maxbin"

#SAMPLES=glob.glob("sample*") #config['binning_samples'])
SAMPLES=config['binning_samples']
print("Samples: ", SAMPLES)

rule phylophlan_all:
    input:
        expand(bin_dir + "{sample}/phylo/phylo.done", sample = SAMPLES),
        bin_dir + "combined_phylo/comb_phylo.done"

rule length_filter:
    input:
        "{assembly}.fasta"
    output:
        "{assembly}_{len}K.fasta"
    shell:
        """contig_length_filter.py {wildcards.len}000 {input} {output}"""
        #"""python2 contig_length_filter.py {wildcards.len}000 {input} {output}"""

rule prodigal:
    input:
        "{path}/%s/{b}_%dK.fasta" % (binner, config["phylophlan"]["min_length"])
    output:
        prot = "{path}/prodigal/{b}.faa",
        gff = "{path}/prodigal/{b}.gff"
        #nuc = "{assembly}.fna",
    params:
        g = 11#config["annotation"].get("translation_table", "11")
    log:
        "{path}.prodigal.log"
    shell:
        #-d {output.nuc}
        """prodigal -i {input} -o {output.gff} -f gff -a {output.prot} \
               -g {params.g} -p meta &> {log}"""

def bin_names(folder):
    b=[os.path.basename(f)[:-len(".fasta")] for f in glob.glob(folder +  "/*.fasta")]
    print("Bins in folder ", folder , " ", b)
    return b
    
rule phylophlan_prep:
    input:
        lambda wc: expand(bin_dir + wc.sample + "/prodigal/{b}.faa", b=bin_names(bin_dir + wc.sample + "/" + binner))
    output:
        touch(PHYLOPHLAN_DIR+"/input/{sample}/prep.done")
    shell:
        """cp {input} $(dirname {output})"""
        
rule phylophlan:
    input:
        PHYLOPHLAN_DIR+"/input/{sample}/prep.done"
    output:
        touch(PHYLOPHLAN_DIR+"/output/{sample}/phlan.done")
    threads:
        config["phylophlan"]["threads"]
    log:
        PHYLOPHLAN_DIR+"/output/{sample}/phlan.log"
    shell:
       """cd {PHYLOPHLAN_DIR} ; python -s phylophlan.py -i -t {wildcards.sample} --nproc {threads} &> {log} ; cd -""" 

rule phylophlan_post:
    input:
        PHYLOPHLAN_DIR+"/output/{sample}/phlan.done"
    output:
        touch(bin_dir + "{sample}/phylo/phylo.done")
    shell:
        """cp $(dirname {input})/* $(dirname {output}) && rm {PHYLOPHLAN_DIR}/{{input,output,data}}/{wildcards.sample}/*"""

#todo reduce code duplication
rule phylophlan_prep_combined:
    input:
        expand(PHYLOPHLAN_DIR+"/input/{sample}/prep.done", sample=SAMPLES)
    output:
        touch(PHYLOPHLAN_DIR+"/input/combined/comb_prep.done")
    shell:
        """for d in $(dirname {input}) ; do cp $d/*.faa $(dirname {output}); done"""
        
rule phylophlan_combined:
    input:
        PHYLOPHLAN_DIR+"/input/combined/comb_prep.done"
    output:
        touch(PHYLOPHLAN_DIR+"/output/combined/comb_phlan.done")
    threads:
        config["phylophlan"]["combined_threads"]
    log:
        PHYLOPHLAN_DIR+"/output/combined/phlan.log"
    shell:
       """cd {PHYLOPHLAN_DIR} ; python -s phylophlan.py -i -t combined --nproc {threads} &> {log} ; cd -""" 

rule phylophlan_post_combined:
    input:
        PHYLOPHLAN_DIR+"/output/combined/comb_phlan.done"
    output:
        touch(bin_dir + "combined_phylo/comb_phylo.done")
    shell:
        """cp $(dirname {input})/* $(dirname {output}) && rm {PHYLOPHLAN_DIR}/{{input,output,data}}/combined/*"""

