ANVIO_ENV = config['anvi_env']

rule anvi_gen_contigs_database:
    input:
        assemble_dir + "{bin_sample}/%s/{bin_sample}.contigs.simple.fa" % config['mapping_assembler']
    output:
        anvio_dir + "{bin_sample}/{bin_sample}.db"
    threads:
        4
    log:
        anvio_dir + "logs/anvi_gen_contigs_database.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_gen_contigs_database.{bin_sample}.json"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            dbname = os.path.basename(output[0])
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    anvi-gen-contigs-database -f {input} -o {temp_dir}/{output}

                    scp {temp_dir}/{output}/{dbname} {output}
                  """)

rule anvi_run_hmms:
    input:
        anvio_dir + "{bin_sample}/{bin_sample}.db"
    output:
        touch(anvio_dir + "{bin_sample}/{bin_sample}.db.run-hmms.done")
    threads:
        30
    log:
        anvio_dir + "logs/anvi_run_hmms.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_run_hmms.{bin_sample}.json"
    run:
        shell("""
                set +u; {ANVIO_ENV}; set -u

                anvi-run-hmms -c {input} --num-threads {threads}
              """)

rule anvi_export_gene_calls:
    input:
        anvio_dir + "{bin_sample}/{bin_sample}.db"
    output:
        anvio_dir + "{bin_sample}/{bin_sample}.gene-calls.fa"
    log:
        anvio_dir + "logs/anvi_export_gene_calls.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_export_gene_calls.{bin_sample}.json"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            out_name = os.path.basename(output[0])
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    anvi-get-dna-sequences-for-gene-calls -c {input} -o {temp_dir}/{out_name}

                    scp {temp_dir}/{out_name} {output}
                  """)

rule anvi_run_centrifuge:
    input:
        fa=anvio_dir + "{bin_sample}/{bin_sample}.gene-calls.fa",
        db=anvio_dir + "{bin_sample}/{bin_sample}.db"
    output:
        hits=anvio_dir + "{bin_sample}/{bin_sample}.centrifuge_hits.tsv",
        report=anvio_dir + "{bin_sample}/{bin_sample}.centrifuge_report.tsv",
        done=touch(anvio_dir + "{bin_sample}/{bin_sample}.db.added_centrifuge.done")
    log:
        anvio_dir + "logs/anvi_run_centrifuge.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_run_centrifuge.{bin_sample}.json"
    params:
        centrifuge_base=config['resources']['centrifuge_base'],
        centrifuge_models=config['resources']['centrifuge_models']
    threads: 8
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            hits_name = os.path.basename(output.hits)
            report_name = os.path.basename(output.report)
            db_dir = os.path.dirname(input.db)
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    export CENTRIFUGE_BASE={params.centrifuge_base}
                    centrifuge -f --threads {threads} \
                    -x {params.centrifuge_models} \
                    {input.fa} \
                    -S {temp_dir}/{hits_name} \
                    --report-file {temp_dir}/{report_name}

                    scp {temp_dir}/{hits_name} {output.hits}
                    scp {temp_dir}/{report_name} {output.report}

                    ln -s {output.hits} {db_dir}/centrifuge_hits.tsv
                    ln -s {output.report} {db_dir}/{wildcards.bin_sample}/centrifuge_report.tsv

                    cd {db_dir}

                    anvi-import-taxonomy -c {input.db} \
                    -i centrifuge_report.tsv centrifuge_hits.tsv \
                    -p centrifuge

                    rm centrifuge_hits.tsv
                    rm centrifuge_report.tsv
                  """)

rule anvi_profile:
    input:
        bam = map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam",
        bai = map_dir + "{bin_sample}/mapping/{bin_sample}_{abund_sample}.bam.bai",
        db=anvio_dir + "{bin_sample}/{bin_sample}.db"
    output:
        aux=anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/AUXILIARY-DATA.h5",
        prof=anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/PROFILE.db",
        info=anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/RUNINFO.cp",
        log=anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/RUNLOG.txt"
    log:
        anvio_dir + "logs/anvi_profile.{bin_sample}.{abund_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_profile.{bin_sample}.{abund_sample}.json"
    threads: 16
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            prof_dir = os.path.dirname(output.prof)
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    anvi-profile -i {input.bam} \
                    --num-threads {threads} --write-buffer-size 2000 \
                    -c {input.db} \
                    --overwrite-output-destinations \
                    -o {temp_dir}/out

                    scp -r {temp_dir}/out {prof_dir}
                  """)

rule anvi_merge:
    input:
        profiles=lambda wildcards: expand(anvio_dir + "{bin_sample}/{bin_sample}.{abund_sample}.bam-ANVIO_PROFILE/RUNINFO.cp",
                        bin_sample=wildcards.bin_sample,
                        abund_sample=config['abundance_samples']),
        db=anvio_dir + "{bin_sample}/{bin_sample}.db",
        centrifuge_done=anvio_dir + "{bin_sample}/{bin_sample}.db.added_centrifuge.done",
        hmms_done=anvio_dir + "{bin_sample}/{bin_sample}.db.run-hmms.done"
    output:        
        aux=anvio_dir + "{bin_sample}/SAMPLES_MERGED/AUXILIARY-DATA.h5",
        prof=anvio_dir + "{bin_sample}/SAMPLES_MERGED/PROFILE.db",
        info=anvio_dir + "{bin_sample}/SAMPLES_MERGED/RUNINFO.mcp"
    log:
        anvio_dir + "logs/anvi_merge.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_merge.{bin_sample}.json"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            merge_dir = os.path.dirname(output.prof)
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    anvi-merge {input.profiles} \
                    -o {temp_dir}/SAMPLES_MERGED \
                    -c {input.db} \
                    -W

                    scp -r {temp_dir}/SAMPLES_MERGED {merge_dir}
                  """)

rule anvi_summarize:
    input:
        prof=anvio_dir + "{bin_sample}/SAMPLES_MERGED/PROFILE.db",
        db=anvio_dir + "{bin_sample}/{bin_sample}.db"
    output:
        anvio_dir + "{bin_sample}/{bin_sample}_SAMPLES-SUMMARY/index.html"
    log:
        anvio_dir + "logs/anvi_summarize.{bin_sample}.log"
    benchmark:
        "benchmarks/anvio/anvi_summarize.{bin_sample}.json"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            summary_dir = os.path.dirname(output[0])
            shell("""
                    set +u; {ANVIO_ENV}; set -u

                    anvi-summarize -p {input.prof} \
                    -c {input.db} \
                    -o {temp_dir}/SAMPLES-SUMMARY \
                    -C CONCOCT

                    scp -r {temp_dir}/SAMPLES-SUMMARY {summary_dir}
                  """)

rule anvio:
    input:
        expand(anvio_dir + "{bin_sample}/{bin_sample}_SAMPLES-SUMMARY/index.html",
               bin_sample=config['binning_samples'])